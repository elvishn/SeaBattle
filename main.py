from typing import List, Dict, Tuple
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import Command
from aiogram.utils.exceptions import TelegramAPIError, BadRequest
import copy

# –í–º–µ—Å—Ç–æ BOT TOKEN HERE –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞,
# –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —É @BotFather
BOT_TOKEN = '7722734285:AAEVt-QgTQIU7W3OWeB713mi6I20CGSvwR8'

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É —Ä–∞–∑–º–µ—Ä–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
FIELD_SIZE = 8

# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
LEXICON = {
    '/start': '–í–æ—Ç —Ç–≤–æ–µ –ø–æ–ª–µ. –ú–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å —Ö–æ–¥',
    0: ' ',
    1: 'üåä',
    2: 'üí•',
    'miss': '–ú–∏–º–æ!',
    'hit': '–ü–æ–ø–∞–ª!',
    'used': '–í—ã —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ —Å—é–¥–∞!',
    'next_move': '–î–µ–ª–∞–π—Ç–µ –≤–∞—à —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥'
}

# –•–∞—Ä–¥–∫–æ–¥–∏–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ
ships: List[List[int]] = [
    [1, 0, 1, 1, 1, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 1, 0],
    [1, 0, 0, 0, 1, 0, 0, 0],
    [0, 0, 0, 0, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 1, 1, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 1, 1, 0, 0, 0, 0]
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º "–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users: Dict[int, Dict[str, list]] = {}


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è callback_data
def generate_callback_data(x: int, y: int) -> str:
    return f"{x}:{y}"


# –ü–∞—Ä—Å–∏–Ω–≥ callback_data
def parse_callback_data(data: str) -> Tuple[int, int]:
    x, y = map(int, data.split(":"))
    return x, y

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
def reset_field(user_id: int) -> None:
    users[user_id]['ships'] = copy.deepcopy(ships)
    users[user_id]['field'] = [
        [0 for _ in range(FIELD_SIZE)]
        for _ in range(FIELD_SIZE)
    ]
# –§—É–Ω–∫—Ü–∏—è, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def get_field_keyboard(user_id: int) -> types.InlineKeyboardMarkup:
    array_buttons: List[List[types.InlineKeyboardButton]] = []

    for i in range(FIELD_SIZE):
        array_buttons.append([])
        for j in range(FIELD_SIZE):
            array_buttons[i].append(types.InlineKeyboardButton(
                text=LEXICON[users[user_id]['field'][i][j]],
                callback_data=generate_callback_data(i, j)
            ))

    return types.InlineKeyboardMarkup(inline_keyboard=array_buttons)


# –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(Command("start"))
async def process_start_command(message: types.Message):
    if message.from_user.id not in users:
        users[message.from_user.id] = {}
    reset_field(message.from_user.id)
    await message.answer(
        text=LEXICON['/start'],
        reply_markup=get_field_keyboard(message.from_user.id)
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –ª—é–±–æ–π –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –Ω–∞ –ø–æ–ª–µ,
# –∑–∞–ø—É—Å–∫–∞—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞–∂–∞—Ç–∏—è –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
@dp.callback_query_handler()
async def process_category_press(callback: types.CallbackQuery):
    x, y = parse_callback_data(callback.data)
    field = users[callback.from_user.id]['field']
    ships = users[callback.from_user.id]['ships']

    if field[x][y] == 0 and ships[x][y] == 0:
        answer = LEXICON['miss']
        field[x][y] = 1
    elif field[x][y] == 0 and ships[x][y] == 1:
        answer = LEXICON['hit']
        field[x][y] = 2
    else:
        answer = LEXICON['used']

    try:
        await callback.message.edit_text(
            text=LEXICON['next_move'],
            reply_markup=get_field_keyboard(callback.from_user.id)
        )
    except (TelegramAPIError, BadRequest) as e:
        pass

    await callback.answer(answer)


if __name__ == "__main__":
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True)
